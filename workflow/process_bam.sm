# ------------------------------------------------------------------------------
# Process bam files, i.e. remove duplicates and low quality reads.
# Outputs processed and sorted files.
# NOTE: we constrain sample names so that they must not contain "_" characters!
# ------------------------------------------------------------------------------
rule process_bam:
	input: 
		id_to_merged
	output: 
		config["results"]["processed"] + "{sample}.bam", 
		config["results"]["processed"] + "{sample}.bam.bai"
	params:
		mapq=config["samtools"]["mapq"]
	wildcard_constraints:
		sample="[a-zA-Z0-9.-]*"
	conda:
		"../envs/samtools.yaml"
	log:
		"logs/process_bam/{sample}.log"
	benchmark:
		"benchmarks/process_bam/{sample}.bmk"
	threads: 
		8
	resources:
		mem_mb=8000
	shell:
		"samtools view -bq{params.mapq} -@{threads} {input} | \
		 samtools sort -@{threads} - | \
		 samtools rmdup -S - {output[0]} && samtools index {output[0]}"

# -----------------------------------------------------------------------------
# Downsample bam files to a specific number of reads/tags.
# -----------------------------------------------------------------------------
rule downsample_bam_pe:
	input:
		bam=config["results"]["processed"]+ "{sample}.bam"
	output:
		bam=config["results"]["processed"] + "{sample}_{samplesize}.bam",
		bai=config["results"]["processed"] + "{sample}_{samplesize}.bam.bai",
		keys=temp(config["results"]["processed"] + "{sample}_{samplesize}_keys.txt"),
		header=temp(config["results"]["processed"] + "{sample}_{samplesize}_header.txt")
	log:
		"logs/downsample_bam/{sample}_{samplesize}.log"
	benchmark:
		"benchmarks/downsample_bam/{sample}_{samplesize}.bmk"
	resources:
		mem_mb=1000
	conda:
		"../envs/samtools.yaml"
	threads:
		8
	shell:
		"""		
		# get file and directory names
		in={input}
		out={output.bam}
		header={output.header}
		keys={output.keys}

		# get header
		samtools view -H $in > ${{header}}

		# get unique read names
		samtools view $in | cut -f 1 | sort -k1,1 | uniq | shuf -n {wildcards.samplesize} > ${{keys}}

		# extract reads selected randomly from the input files read names
		samtools view -h ${{in}} | awk 'NR==FNR{{arr[$1];next}} $1 in arr || $1 ~ /^@/' ${{keys}} - | samtools view -b -@{threads} - | samtools sort -@{threads} -o ${{out}}
		samtools reheader -i -P ${{header}} ${{out}}
		samtools index ${{out}}
		"""
