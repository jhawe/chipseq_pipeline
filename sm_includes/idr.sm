# ------------------------------------------------------------------------------
# Rules to perform the IDR analysis for ChIP-seq replicates
# ------------------------------------------------------------------------------

# some global variables for the IDR analysis
# define replicate suffixes based on config
RSU = [config["replicates"]["suffix1"], config["replicates"]["suffix2"]]
# suffixes for split bam files in idr analysis
SSU = [config["split_bam"]["suffix1"],config["split_bam"]["suffix2"]]


# ------------------------------------------------------------------------------
# Simple rule to link  the original replicate bam files to the idr result dir
# ------------------------------------------------------------------------------
rule link_replicate:
	input:
		config["results"]["processed"] + "{{sample}}_{ds}.bam".format(ds=config["downsample"]["size"]),
		config["results"]["processed"] + "{{sample}}_{ds}.bam.bai".format(ds=config["downsample"]["size"])
	output:
		config["results"]["idr"] + "{sample}.bam",
		config["results"]["idr"] + "{sample}.bam.bai"
	wildcard_constraints:
		sample="[a-zA-Z0-9.-]*"
	shell:
		"""
		ln -s {input[0]} {output[0]}
		ln -s {input[1]} {output[1]}
		"""
# ------------------------------------------------------------------------------
# split bam files to 50/50 reads, i.e. create pseudo-replicates
# ------------------------------------------------------------------------------
rule split_bam:
	input: 
		config["results"]["processed"] + "{{sample}}_{ds}.bam".format(ds=config["downsample"]["size"])
	output: 
		expand(config["results"]["idr"] + "{{sample}}{sp}.bam", sp=SSU) 
	wildcard_constraints:
		sample="[AB][HL][0-9]-[0-9]"
	threads: 
		8
	resources:
		mem_mb=400
	benchmark:
		"benchmarks/split_bam/{sample}.bmk"
	wrapper:
		"file:wrappers/samtools/random_split"

rule split_merged:
        input:
                config["results"]["idr"] + "{sample}_merged.bam"
        output:
#                expand(config["results"]["idr"] + "{{sample}}_merged_{sp}.bam", sp=SSU)
                config["results"]["idr"] + "{sample}_merged_split1.bam",
                config["results"]["idr"] + "{sample}_merged_split2.bam"
        threads:
                8
        resources:
                mem_mb=400
        benchmark:
                "benchmarks/split_bam/{sample}.bmk"
        wrapper:
                "file:wrappers/samtools/random_split"

# ------------------------------------------------------------------------------
# Merge replicates for IDR analysis
# ------------------------------------------------------------------------------
#def get_replicates(wc):
	
rule merge_replicates:
	input:	
		expand(config["results"]["idr"] + "{{sample}}{su}.bam", su=RSU)
	output: 
		config["results"]["idr"] + "{sample}_merged.bam", 
		config["results"]["idr"] + "{sample}_merged.bam.bai"
	log:
		"logs/merge_replicates/{sample}.log"
	benchmark:
		"benchmarks/merge_replicates/{sample}.bmk"
	resources:
		mem_mb=2000
	threads: 1
	conda:
		"envs/samtools.yaml"
	shell:
		"samtools merge {output[0]} {input[0]} {input[1]} \
		 && samtools index {output[0]} &> {log}"

# ------------------------------------------------------------------------------
# Call peaks for the IDR analysis (low stringency)
# ------------------------------------------------------------------------------
rule callpeaks_idr:
       input:
               control=config["data"]["control"],
               treatment=config["results"]["idr"] + "{sample}.bam"
       output:
               config["results"]["idr"] + "{sample}_peaks.narrowPeak"
       params:
               genome=config["macs"]["genome"],
               pcut=config["macs"]["pcut"],
               maxpeaks=config["idr"]["maxpeaks"],
               prefix="{sample}",
               odir=config["results"]["idr"]
       resources:
               mem_mb=600
       threads: 1
       benchmark:
               "benchmarks/regionpeak/{sample}.bmk"
       log:
               "logs/regionpeak/{sample}.log"
       wrapper:
               "file:wrappers/macs2/callpeaks"

# ------------------------------------------------------------------------------
# Peak consistency analysis between (pseudo-)replicates
# ------------------------------------------------------------------------------
rule consistency_analysis:
	input:
		rep1=config["results"]["idr"] + "{sample}{r1}_peaks.narrowPeak",
		rep2=config["results"]["idr"] + "{sample}{r2}_peaks.narrowPeak",
	output:
		config["results"]["idr"] + "{sample}{r1}_vs_{sample}{r2}_idr.txt"
	resources:
		mem_mb=500
	threads: 1
	log:
		"logs/consistency/{sample}_{r1}_{r2}.log"
	benchmark:
		"benchmarks/consistency_analysis/{sample}_{r1}_{r2}.bmk"
	wrapper:
		"file:wrappers/idr/consistency"

# ------------------------------------------------------------------------------
# Helper method to generate the IDR result filenames
# ------------------------------------------------------------------------------
def idr_files(wc):
	sc1 = config["results"]["idr"] + "{sample}{rep1}{split1}_vs_{sample}{rep1}{split2}_idr.txt".format(rep1=RSU[0], rep2=RSU[1], split1=SSU[0], split2=SSU[1], sample=wc.sample)
	sc2 = config["results"]["idr"] + "{sample}{rep2}{split1}_vs_{sample}{rep2}{split2}_idr.txt".format(rep1=RSU[0], rep2=RSU[1], split1=SSU[0], split2=SSU[1], sample=wc.sample)
	rep1_v_rep2 = config["results"]["idr"] + "{sample}{rep1}_vs_{sample}{rep2}_idr.txt".format(rep1=RSU[0], rep2=RSU[1], sample=wc.sample)
	merged = config["results"]["idr"] + "{sample}_merged{split1}_vs_{sample}_merged{split2}_idr.txt".format(split1=SSU[0], split2=SSU[1], sample=wc.sample)

	# return dictionary containing the lists
	out = {
		"rep1_selfconsistency" : sc1,
		"rep2_selfconsistency" : sc2, 
		"rep1_rep2" : rep1_v_rep2,
		"merged_selfconsistency" : merged
	}
	return(out)

# ------------------------------------------------------------------------------
# Summarize the individual IDR results in a neat little file...
# ------------------------------------------------------------------------------
rule summarize_idr:
	input: 
		unpack(idr_files)
	output: 
		config["results"]["idr"] + "{sample}_idr_summary.txt"
	params:
		pcut=config["macs"]["pcut"],
		sample="{sample}"
	script:
		"scripts/summarize-idr.R"

# ------------------------------------------------------------------------------
# Test IDR analysis pipeline for two files.
# ------------------------------------------------------------------------------
rule test:
	input: rep1="results/BH1-2.regionPeak.gz",
		rep2="results/BH1-1.regionPeak.gz"
	output:
		"results/test-idr.txt"
	resources:
		mem_mb=500
	threads: 1
	conda:
		"wrappers/idr/consistency/environment.yaml"
	shell:
		"idr --rank p.value -o {output[0]} --input-file-type narrowPeak --use-old-output-format -s {input.rep1} {input.rep2}"

